
IGNORE: "<\?php|[ \t\n]";

VARIABLENAME: "\$[a-zA-Z_][a-zA-Z0-9_]*";
IDENTIFIERNAME: "[a-zA-Z_][a-zA-Z0-9_]*";

main: sourceelements [EOF];

sourceelements  : sourceelement >sourceelements<
                | sourceelement
                ;

sourceelement   : <functiondeclaration>
                | <statement>
                ;

functiondeclaration : ["function"] identifier "(" formalparameterlist? ")" ["{"] functionbody? "}"
                    ;

functionexpression  : ["function"] identifier? "(" formalparameterlist? ")" ["{"] functionbody? "}"
                    ;

formalparameterlist : variable [","] >formalparameterlist<
                    | variable
                    ;

functionbody    : <sourceelements>
                ;

statement : <block>
          | <expressionstatement> [";"]
          | <ifstatement>
          | <iterationstatement>
          | <printstatement> [";"]
          | <returnstatement> [";"]
          ;

block   : "{" >statementlist<? ["}"]
        ;

statementlist   : statement >statementlist<
                | statement
                ;

returnstatement : ["return"] expression?
                ;

expressionstatement : expression
                    ;

initialiser : ["="] assignmentexpression
            ;

ifstatement : ["if"] ["("] expression [")"] statement  ["else"] statement
            | ["if"] ["("] expression [")"] statement
            ;

iterationstatement
    : whiles
    ;

whiles
    : "while" ["("] expression [")"] statement
    ;

printstatement: "print" expression ;

primaryexpression   : <identifier>
                    | <variable>
                    | <literal>
                    | <arrayliteral>
                    ;

arrayliteral    : "[" >elementlist< ["]"]
                | "array(" >elementlist< [")"]
                | "[" >elementlist< ["," "]"]
                ;

elementlist : assignmentexpression ([","] assignmentexpression)*
            ;

memberexpression    : primaryexpression >memberexpressiona<+
                    | functionexpression >memberexpressiona<+
                    | <primaryexpression>
                    | <functionexpression>
                    ;

memberexpressiona   : "[" expression ["]"]
                    ;

newexpression   : <memberexpression>
                ;

callexpression  : memberexpression arguments >callexpressiona<*
                ;

callexpressiona : arguments
                ;

arguments   : "(" [")"]
            | "(" >argumentlist< [")"]
            ;

argumentlist    : assignmentexpression [","] >argumentlist<
                | assignmentexpression;

lefthandsideexpression  : <callexpression>
                        | <newexpression>
                        ;
joinop: ".";
stringjoinexpression  : lefthandsideexpression (>joinop< lefthandsideexpression)+
                    | <lefthandsideexpression>
                    ;

multop: "*" | "/" | "%";
multiplicativeexpression    : stringjoinexpression (>multop< stringjoinexpression)+
                            | <stringjoinexpression>
                            ;
addop: "+" | "-";
additiveexpression  : multiplicativeexpression (>addop< multiplicativeexpression)+
                    | <multiplicativeexpression>
                    ;

relationalop: "<" | ">" | "<=" | ">=" | "instanceof" | "in";
relationalexpression    : additiveexpression (>relationalop< relationalexpression)+
                        | <additiveexpression>
                        ;

equalityop: "==" | "!=" | "===" | "!==";
equalityexpression  : relationalexpression (>equalityop< relationalexpression)+
                    | <relationalexpression>
                    ;

assignmentexpression    : lefthandsideexpression >assignmentoperator< assignmentexpression
                        | <equalityexpression>
                        ;

assignmentoperator  : "=" | "\*=" | "\/=" | "\%=" | "\+=" | "\-=" | "<<="
                    | ">>=" | ">>>=" | "&=" | "^=" | "\|="
                    ;

expression  : assignmentexpression ("," assignmentexpression)+
            | <assignmentexpression>
            ;

identifier: <IDENTIFIERNAME>;
variable: <VARIABLENAME>;

literal : <nullliteral>
        | <booleanliteral>
        | <numericliteral>
        | <stringliteral>
        ;

nullliteral : "null";

booleanliteral  : "true"
                | "false"
                ;

numericliteral  : <DECIMALLITERAL>
                ;

DECIMALLITERAL  : "(((0|[1-9][0-9]*)(\.[0-9]*)?)|(\.[0-9]+))([eE][\+\-]?[0-9]*)?"
                ;

stringliteral   : <SINGLESTRING>
                | <DOUBLESTRING>
                ;

SINGLESTRING    : "'([^'\\]|\\.)*'"
                ;

DOUBLESTRING    : "\"([^\"\\]|\\.)*\""
                ;
